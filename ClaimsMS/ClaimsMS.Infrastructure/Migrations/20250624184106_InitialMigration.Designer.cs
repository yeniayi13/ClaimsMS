// <auto-generated />
using System;
using ClaimsMS.Infrastructure.Database.Context.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClaimsMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624184106_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClaimsMS.Domain.Entities.Claims.ClaimEntity", b =>
                {
                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimAuctionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClaimEvidence")
                        .HasColumnType("text");

                    b.Property<string>("ClaimReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClaimUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ResolutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusClaim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ClaimId");

                    b.HasIndex("ResolutionId");

                    b.ToTable("Claims", (string)null);
                });

            modelBuilder.Entity("ClaimsMS.Domain.Entities.Resolutions.ResolutionEntity", b =>
                {
                    b.Property<Guid>("ResolutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ResolutionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ResolutionId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("ResolutionId")
                        .IsUnique();

                    b.ToTable("Resolutions", (string)null);
                });

            modelBuilder.Entity("ClaimsMS.Domain.Entities.Claims.ClaimEntity", b =>
                {
                    b.HasOne("ClaimsMS.Domain.Entities.Resolutions.ResolutionEntity", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("ClaimsMS.Domain.Entities.Resolutions.ResolutionEntity", b =>
                {
                    b.HasOne("ClaimsMS.Domain.Entities.Claims.ClaimEntity", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });
#pragma warning restore 612, 618
        }
    }
}
